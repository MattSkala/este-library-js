// Generated by github.com/steida/coffee2closure 0.0.14
/**
  @fileoverview Presenter orchestrates model/collection loading and view
  showing. Every presenter is associated with some url. When url is matched,
  este.App will call presenter's load method and pass parsed url parameters.
  Load method has to return goog.result.Result to signalize that data are
  loaded. When data are loaded and user did't try to load another presenter
  during loading, show method is called.
*/
goog.provide('este.app.Presenter');
goog.require('este.app.View');
goog.require('este.Base');
goog.require('goog.net.HttpStatus');
goog.require('goog.result');

/**
  @constructor
  @extends {este.Base}
*/
este.app.Presenter = function() {
  este.app.Presenter.superClass_.constructor.call(this);
}
goog.inherits(este.app.Presenter, este.Base);

/**
  Presenter's view. Should be created in constructor.
  @type {este.app.View}
*/
este.app.Presenter.prototype.view = null;

/**
  Storage used for model persistence. By default defined on este.App, but we
  can override it for concrete presenter.
  @type {este.storage.Base}
*/
este.app.Presenter.prototype.storage = null;

/**
  Screen is used for view showing/hidding. By default defined on este.App,
  but we can override it for concrete presenter.
  @type {este.app.screen.Base}
*/
este.app.Presenter.prototype.screen = null;

/**
  This helper method allows us to generate URL for concrete presenter, so we
  don't have to hardcode URLs in code. All URLs should be defined only at one
  place. In app.start method.
  Example: this.createUrl app.products.list.Presenter, 'id': 123
  @type {Function}
*/
este.app.Presenter.prototype.createUrl = null;

/**
  Redirect to another presenter from code.
  Example: this.redirect app.products.list.Presenter, 'id': 123
  @type {Function}
*/
este.app.Presenter.prototype.redirect = null;

/**
  Async data load. Use this method in subclassed presenter to load data for
  view. This method should be overridden.
  @param {Object=} params
  @return {!goog.result.Result}
*/
este.app.Presenter.prototype.load = function(params) {
  return goog.result.successfulResult(null);
};

/**
  Called on successful load.
  @param {boolean} isNavigation
  @param {goog.result.Result} result
*/
este.app.Presenter.prototype.beforeShow = function(isNavigation, result) {
  if (!this.view) {
    return;
  }
  this.view.createUrl = this.createUrl;
  this.view.redirect = this.redirect;
  this.show(result);
  return this.screen.show(this.view, isNavigation);
};

/**
  Called when next presenter is going to be shown.
*/
este.app.Presenter.prototype.beforeHide = function() {
  if (!this.view) {
    return;
  }
  this.hide();
  return this.screen.hide(this.view);
};

/**
  You can use this method to pass data into view or start watching view model
  events. This method should be overridden.
  @param {goog.result.Result} result
  @protected
*/
este.app.Presenter.prototype.show = function(result) {};

/**
  You can use this method to stop watching view model events. This method
  should be overridden.
  @protected
*/
este.app.Presenter.prototype.hide = function() {};

/**
  @param {!goog.result.Result} result
  @param {Function} onSuccess
  @protected
*/
este.app.Presenter.prototype.onResult = function(result, onSuccess) {
  var _this = this;
  goog.result.waitOnSuccess(result, function() {
    return onSuccess.call(_this);
  });
  return goog.result.waitOnError(result, function(error) {
    return _this.dispatchEvent({
      type: 'error',
      error: error
    });
  });
};

/**
  @param {!este.Collection} collection
  @param {!goog.result.Result} result
  @protected
*/
este.app.Presenter.prototype.tryGetFirst = function(collection, result) {
  var returnResult,
    _this = this;
  returnResult = new goog.result.SimpleResult;
  goog.result.waitOnError(result, returnResult.setError);
  goog.result.waitOnSuccess(result, function() {
    var first;
    first = collection.at(0);
    if (!first) {
      returnResult.setError(goog.net.HttpStatus.NOT_FOUND);
      return;
    }
    return returnResult.setValue(first);
  });
  return returnResult;
};

/**
  @override
*/
este.app.Presenter.prototype.disposeInternal = function() {
  this.view.dispose();
  este.app.Presenter.superClass_.disposeInternal.call(this);
};