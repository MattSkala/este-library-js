// Generated by github.com/steida/coffee2closure 0.0.14
suite('este.demos.app.todomvc.todos.Collection', function() {
  var Collection, collection;
  Collection = este.demos.app.todomvc.todos.Collection;
  collection = null;
  setup(function() {
    var json;
    json = [
      {
        completed: false
      }, {
        completed: false
      }
    ];
    return collection = new Collection(json);
  });
  suite('constructor', function() {
    return test('should work', function() {
      return assert.instanceOf(collection, Collection);
    });
  });
  suite('toggleCompleted', function() {
    return test('should set all items completed', function() {
      assert.isFalse(collection.at(0).get('completed'));
      assert.isFalse(collection.at(1).get('completed'));
      collection.toggleCompleted(true);
      assert.isTrue(collection.at(0).get('completed'));
      assert.isTrue(collection.at(1).get('completed'));
      collection.toggleCompleted(false);
      assert.isFalse(collection.at(0).get('completed'));
      return assert.isFalse(collection.at(1).get('completed'));
    });
  });
  suite('clearCompleted', function() {
    return test('should remove completed item from collection', function() {
      assert.equal(2, collection.getLength());
      collection.at(0).set('completed', true);
      collection.clearCompleted();
      assert.equal(1, collection.getLength());
      return assert.equal(collection.at(0).get('completed'), false);
    });
  });
  suite('getRemainingCount', function() {
    return test('should return number of incomplete items', function() {
      assert.equal(2, collection.getRemainingCount());
      collection.at(0).set('completed', true);
      assert.equal(1, collection.getRemainingCount());
      collection.at(1).set('completed', true);
      return assert.equal(0, collection.getRemainingCount());
    });
  });
  suite('getCompletedCount', function() {
    return test('should return number of incomplete items', function() {
      assert.isFalse(collection.allCompleted());
      collection.at(0).set('completed', true);
      assert.isFalse(collection.allCompleted());
      collection.at(1).set('completed', true);
      return assert.isTrue(collection.allCompleted());
    });
  });
  return suite('filterByState', function() {
    return test('should work', function() {
      var active, all, completed, json;
      json = [
        {
          completed: false
        }, {
          completed: true
        }
      ];
      collection = new Collection(json);
      collection.state = 'completed';
      completed = collection.filterByState();
      assert.lengthOf(completed, 1);
      collection.state = 'active';
      active = collection.filterByState('active');
      assert.lengthOf(active, 1);
      collection.state = null;
      all = collection.filterByState();
      return assert.lengthOf(all, 2);
    });
  });
});