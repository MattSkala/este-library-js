// Generated by github.com/steida/coffee2closure 0.0.14
/**
  @fileoverview este.demos.app.todomvc.todos.list.react.
  @see http://estejs.tumblr.com/post/32600427488/why-script-elements-used-for-templates-are-wrong
*/
goog.provide('este.demos.app.todomvc.todos.list.react');
goog.require('este.react');
este.demos.app.todomvc.todos.list.react = este.react.create(/** @lends {React.ReactComponent.prototype} */({
  render: function() {
    return this.div([this.renderHeader(), this.props['showBodyAndFooter'] ? [this.renderMain(), this.renderFooter()] : void 0]);
  },
  renderHeader: function() {
    return this.header({
      'className': 'header'
    }, [
      this.h1('todos'), this.form({
        'className': 'new-todo-form'
      }, [
        this.input({
          'autoFocus': true,
          'className': 'new-todo',
          'name': 'title',
          'placeholder': 'What needs to be done?'
        })
      ])
    ]);
  },
  renderMain: function() {
    return this.section({
      'className': 'main'
    }, [
      this.input({
        'checked': this.props['remainingCount'] === 0,
        'className': 'toggle-all',
        'type': 'checkbox'
      }), this.label({
        'htmlFor': 'toggle-all'
      }, 'Mark all as complete'), this.ul({
        'className': 'todo-list'
      }, this.props['todos'].map(this.renderTodoItem, this))
    ]);
  },
  renderTodoItem: function(todo) {
    var props;
    props = {
      'data-e-model-cid': todo['_cid'],
      'className': (function() {
        var classNames;
        classNames = [];
        if (todo['completed']) {
          classNames.push('completed');
        }
        if (todo['editing']) {
          classNames.push('editing');
        }
        return classNames.join(' ');
      })()
    };
    return this.li(props, [
      this.div({
        'className': 'view'
      }, [
        this.input({
          'checked': todo['completed'],
          'className': 'toggle',
          'type': 'checkbox'
        }), this.label(todo['title']), this.button({
          'className': 'destroy'
        })
      ]), this.input({
        'className': 'edit',
        'defaultValue': todo['title']
      })
    ]);
  },
  renderFooter: function() {
    var getClassIfSelected,
      _this = this;
    getClassIfSelected = function(state) {
      if (_this.props['state'] === state) {
        return 'selected';
      }
      return '';
    };
    return this.footer({
      'className': 'footer'
    }, [
      this.span({
        'className': 'todo-count'
      }, [this.strong(this.props['remainingCount']), " " + this.props['itemsLeftLocalized']]), this.ul({
        'className': 'filters'
      }, [
        this.li(this.a({
          'className': getClassIfSelected(''),
          'href': '#/'
        }, 'All')), this.li(this.a({
          'className': getClassIfSelected('active'),
          'href': '#/active'
        }, 'Active')), this.li(this.a({
          'className': getClassIfSelected('completed'),
          'href': '#/completed'
        }, 'Completed'))
      ]), this.props['doneCount'] > 0 ? this.button({
        'className': 'clear-completed'
      }, "Clear completed (" + this.props['doneCount'] + ")") : void 0
    ]);
  }
}));