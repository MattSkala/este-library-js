// Generated by github.com/steida/coffee2closure 0.0.14
/**
  @fileoverview Class to detect scrollable content reaching scroll end. Then
  'load' event is dispatched.

  @see /demos/events/infinitescrollhandler.html
*/
goog.provide('este.events.InfiniteScrollHandler');
goog.require('este.Base');

/**
  @param {Element} element
  @param {Function} load
  @constructor
  @extends {este.Base}
*/
este.events.InfiniteScrollHandler = function(element, load) {
  this.element = element;
  this.load = load;
  este.events.InfiniteScrollHandler.superClass_.constructor.call(this);
}
goog.inherits(este.events.InfiniteScrollHandler, este.Base);

/**
  @enum {string}
*/
este.events.InfiniteScrollHandler.EventType = {
  LOAD: 'load'
};

/**
  Threshold in px.
  @type {number}
*/
este.events.InfiniteScrollHandler.prototype.threshold = 0;

/**
  @type {Element}
  @protected
*/
este.events.InfiniteScrollHandler.prototype.element = null;

/**
  @type {Function}
  @protected
*/
este.events.InfiniteScrollHandler.prototype.load = null;

/**
  @param {boolean} enable
*/
este.events.InfiniteScrollHandler.prototype.setEnabled = function(enable) {
  if (enable) {
    return this.on(this.element, 'scroll', this.onElementScroll);
  } else {
    return this.off(this.element, 'scroll', this.onElementScroll);
  }
};

/**
  @param {goog.events.BrowserEvent} e
  @protected
*/
este.events.InfiniteScrollHandler.prototype.onElementScroll = function(e) {
  var shouldScroll,
    _this = this;
  shouldScroll = this.element.scrollTop + this.element.offsetHeight >= this.element.scrollHeight - this.threshold;
  if (!shouldScroll) {
    return;
  }
  this.setEnabled(false);
  return this.load(function() {
    return _this.setEnabled(true);
  });
};