// Generated by github.com/steida/coffee2closure 0.0.14
/**
  @fileoverview este.labs.app.Route.
*/
goog.provide('este.labs.app.Route');

/**
  @param {string|Array.<string>} path
  @constructor
*/
este.labs.app.Route = function(path) {
  this.path = path;
  this.keys = [];
  this.pathToRegExp();
}

/**
  @param {Array.<este.labs.app.Route>} routes
  @param {string} url
  @return {este.labs.app.Route}
*/
este.labs.app.Route.match = function(routes, url) {
  var route, _i, _len;
  for (_i = 0, _len = routes.length; _i < _len; _i++) {
    route = routes[_i];
    if (route.match(url)) {
      return route;
    }
  }
  return null;
};

/**
  @type {string|Array.<string>}
  @protected
*/
este.labs.app.Route.prototype.path = null;

/**
  @type {Array.<Object>}
  @protected
*/
este.labs.app.Route.prototype.keys = null;

/**
  @type {RegExp}
  @protected
*/
este.labs.app.Route.prototype.regexp = null;

/**
  @param {string} url
  @return {boolean}
*/
este.labs.app.Route.prototype.match = function(url) {
  return !!this.getMatches(url);
};

/**
  @param {string} url
  @return {Object}
*/
este.labs.app.Route.prototype.parseParams = function(url) {
  var i, key, match, matches, params, value, _i, _len;
  matches = this.getMatches(url);
  if (!matches) {
    return null;
  }
  params = null;
  for (i = _i = 0, _len = matches.length; _i < _len; i = ++_i) {
    match = matches[i];
    if (!i) {
      continue;
    }
    key = this.keys[i - 1];
    value = typeof match === 'string' ? this.decodeMatch(match) : match;
    if (key) {
      if (params == null) {
        params = {};
      }
      params[key.name] = value;
    } else {
      if (params == null) {
        params = [];
      }
      params.push(value);
    }
  }
  return params;
};

/**
  @param {(Object|Array)} params
  @return {string}
*/
este.labs.app.Route.prototype.createUrl = function(params) {
  var index, key, regex, url, value, _ref;
  url = this.path;
  if (Array.isArray(params)) {
    index = 0;
    url = url.replace(/\*/g, function() {
      return params[index++];
    });
  } else {
    url = url;
    for (key in params) {
      value = params[key];
      if (value === void 0) {
        value = '';
      }
      regex = new RegExp("\\:" + key);
      url = url.replace(regex, value);
    }
  }
  if (url.charAt(url.length - 1) === '?') {
    url = url.slice(0, -1);
  }
  if (url.length > 1 && ((_ref = url.charAt(url.length - 1)) === '/' || _ref === '.')) {
    url = url.slice(0, -1);
  }
  return url;
};

/**
  @param {string} url
  @return {Array.<string>}
  @protected
*/
este.labs.app.Route.prototype.getMatches = function(url) {
  var index, pathname;
  index = url.indexOf('?');
  pathname = index > -1 ? url.slice(0, index) : url;
  return this.regexp.exec(pathname);
};

/**
  @param {string} str
  @return {string}
  @protected
*/
este.labs.app.Route.prototype.decodeMatch = function(str) {
  var e;
  try {
    return decodeURIComponent(str);
  } catch (_error) {
    e = _error;
  }
  return str;
};

/**
  @protected
*/
este.labs.app.Route.prototype.pathToRegExp = function() {
  var path,
    _this = this;
  path = this.path;
  if (Array.isArray(path)) {
    path = '(' + path.join('|') + ')';
  }
  path = path.concat('/?').replace(/\/\(/g, '(?:/').replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star) {
    _this.keys.push({
      name: key,
      optional: !!optional
    });
    slash = slash || '';
    return (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '') + (star ? '(/*)?' : '');
  }).replace(/([\/.])/g, '\\$1').replace(/\*/g, '(.*)');
  return this.regexp = new RegExp("^" + path + "$", 'i');
};