// Generated by github.com/steida/coffee2closure 0.0.14
goog.require('goog.array');
/**
  @fileoverview Validate inexistence value in list.
*/
goog.provide('este.validators.Exclusion');
goog.provide('este.validators.exclusion');
goog.require('este.validators.Base');

/**
  @param {!Array} exclusion
  @param {function(): string=} getMsg
  @constructor
  @extends {este.validators.Base}
*/
este.validators.Exclusion = function(exclusion, getMsg) {
  this.exclusion = exclusion;
  este.validators.Exclusion.superClass_.constructor.call(this, getMsg);
}
goog.inherits(este.validators.Exclusion, este.validators.Base);

/**
  @type {Array}
  @protected
*/
este.validators.Exclusion.prototype.exclusion = null;

/**
  @override
*/
este.validators.Exclusion.prototype.validate = function() {
  var _ref;
  return _ref = this.value, goog.array.indexOf(this.exclusion, _ref) < 0;
};

/**
  @override
*/
este.validators.Exclusion.prototype.getMsg = function() {
  
/**
    @desc Exclusion validator message.
  */
  return este.validators.Exclusion.MSG_VALIDATOR_EXCLUSION = goog.getMsg('\'{$value}\' is not allowed.', {
    'value': this.value
  });
};

/**
  @param {!Array} exclusion
  @param {function(): string=} getMsg
  @return {function(): este.validators.Exclusion}
*/
este.validators.exclusion = function(exclusion, getMsg) {
  return function() {
    return new este.validators.Exclusion(exclusion, getMsg);
  };
};