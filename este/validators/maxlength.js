// Generated by github.com/steida/coffee2closure 0.0.14
/**
  @fileoverview Validate string length.
*/
goog.provide('este.validators.MaxLength');
goog.provide('este.validators.maxLength');
goog.require('este.validators.Base');

/**
  @param {number} maxLength
  @param {function(): string=} getMsg
  @constructor
  @extends {este.validators.Base}
*/
este.validators.MaxLength = function(maxLength, getMsg) {
  this.maxLength = maxLength;
  este.validators.MaxLength.superClass_.constructor.call(this, getMsg);
}
goog.inherits(este.validators.MaxLength, este.validators.Base);

/**
  @type {number}
  @protected
*/
este.validators.MaxLength.prototype.maxLength = 0;

/**
  @override
*/
este.validators.MaxLength.prototype.validate = function() {
  goog.asserts.assertString(this.value);
  return this.value.length <= this.maxLength;
};

/**
  @override
*/
este.validators.MaxLength.prototype.getMsg = function() {
  
/**
    @desc MaxLength validator message.
  */
  return este.validators.MaxLength.MSG_VALIDATOR_MAX_LENGTH = goog.getMsg('Please enter no more than {$maxLength} characters.', {
    'maxLength': this.maxLength
  });
};

/**
  @param {number} maxLength
  @param {function(): string=} getMsg
  @return {function(): este.validators.MaxLength}
*/
este.validators.maxLength = function(maxLength, getMsg) {
  return function() {
    return new este.validators.MaxLength(maxLength, getMsg);
  };
};