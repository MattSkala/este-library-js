// Generated by github.com/steida/coffee2closure 0.0.14
/**
  @fileoverview Validate number or string number range.
*/
goog.provide('este.validators.Range');
goog.provide('este.validators.range');
goog.require('este.validators.Base');
goog.require('este.validators.min');
goog.require('este.validators.max');

/**
  @param {number} min
  @param {number} max
  @param {function(): string=} getMsg
  @constructor
  @extends {este.validators.Base}
*/
este.validators.Range = function(min, max, getMsg) {
  this.min = min;
  this.max = max;
  este.validators.Range.superClass_.constructor.call(this, getMsg);
}
goog.inherits(este.validators.Range, este.validators.Base);

/**
  @type {number}
  @protected
*/
este.validators.Range.prototype.min = 0;

/**
  @type {number}
  @protected
*/
este.validators.Range.prototype.max = 0;

/**
  @override
*/
este.validators.Range.prototype.validate = function() {
  var isStringOrNumber, value, _ref;
  isStringOrNumber = (_ref = typeof this.value) === 'string' || _ref === 'number';
  goog.asserts.assert(isStringOrNumber, 'Expected string or number.');
  value = this.value;
  if (goog.isString(value)) {
    value = goog.string.toNumber(value);
  }
  value = /** @type {number} */(value);
  if (!goog.math.isFiniteNumber(value)) {
    return false;
  }
  return (this.min <= value && value <= this.max);
};

/**
  @override
*/
este.validators.Range.prototype.getMsg = function() {
  
/**
    @desc Range validator message.
  */
  return este.validators.Range.MSG_VALIDATOR_RANGE = goog.getMsg('Please enter a value between {$min} and {$max}.', {
    'min': this.min,
    'max': this.max
  });
};

/**
  @param {number} min
  @param {number} max
  @param {function(): string=} getMsg
  @return {function(): este.validators.Range}
*/
este.validators.range = function(min, max, getMsg) {
  return function() {
    return new este.validators.Range(min, max, getMsg);
  };
};